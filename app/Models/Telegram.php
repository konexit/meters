<?php

namespace App\Models;

use CodeIgniter\Model;

class Telegram extends Model
{

    public function telegram($json)
    {
        try {
            $chatId = '';
            $sendMessage = true;
            $resMessage = [];
            if (isset($json->message->text)) {
                $chatId = $json->message->chat->id;
                $resMessage = $this->message($json, $chatId);
            } elseif (isset($json->callback_query)) {
                $chatId = $json->callback_query->message->chat->id;
                $resMessage = $this->callback($json, $chatId);
            } elseif (isset($json->my_chat_member)) {
                $userModel = new User();
                if ($userModel->findUserByChatId($json->my_chat_member->chat->id) != null) {
                    $userModel->removeTelegramDataByChatId($json->my_chat_member->chat->id, "");
                }
                $sendMessage = false;
            } else $sendMessage = false;
            return [
                "code" => 200,
                "json" => [
                    "telegramDispatcher" => [
                        "chat_id" => [strval($chatId)],
                        "sendMessage" => $sendMessage
                    ],
                    "telegram" => $resMessage
                ]
            ];
        } catch (Exception $e) {
            return [
                "code" => 500,
                "error" => $e->getMessage()
            ];
        }
    }

    public function telegramUpdates($json)
    {
        $jsonAction = $json->action;
        if ($jsonAction == "userNotify") {
            $search = new Search();
            $users = $search->findUsersCountersNotFilled();
            $chats_id = array();
            foreach ($users as $user) {
                array_push($chats_id, $user['telegramChatId']);
            }
            return [
                "code" => 200,
                "json" => [
                    "telegramDispatcher" => ["chat_id" => $chats_id, "sendMessage" => !empty($users)],
                    "telegram" => [$this->createTelegramMessage("‚ùï‚ùï‚ùï–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∏‚ùï‚ùï‚ùï")]
                ]
            ];
        } elseif ($jsonAction == "managerNotify") {
            $search = new Search();
            $units = $search->findCountNotFilledCountersOfUser();
            $message = array();
            array_push($message, $this->createTelegramMessage("<b>–°–ø–∏—Å–æ–∫ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏—Ö –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ —Ç–∞ —ó—Ö —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è</b>"));
            foreach ($units as $unit) {
                array_push(
                    $message,
                    $this->createTelegramMessage("<i>–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª:</i> <b>" . $unit['unit'] . "</b>\n<i>–õ—ñ—á–∏–ª—å–Ω–∏–∫–∏:</i> <u>" . str_replace(' ', '</u> <u>', $unit['counters']) . "</u>\n" .
                        "<i>–ê–¥—Ä–µ—Å:</i> <b>" . $unit['addr'] . "</b>\n<i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> <b>" . $unit['tel'] . "</b>")
                );
            }
            return [
                "code" => 200,
                "json" => ["telegramDispatcher" => [
                    "chat_id" => $json->chatId,
                    "sendMessage" => !empty($units)
                ], "telegram" => $message]
            ];
        }
    }


    private function message($json, $chatId)
    {
        $userModel = new User();
        $search = new Search();
        $tgUser = $userModel->findUserByChatId($chatId);
        $textMess = $json->message->text;

        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Å–∏—Å—Ç–µ–º—ñ
        if ($tgUser == null) {

            // –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–º–æ–≤–∏
            if ($textMess == '/start') return [$this->createTelegramMessage("–í–≤–µ–¥—ñ—Ç—å –≤–ª–∞—Å–Ω–∏–π <b>–ª–æ–≥—ñ–Ω</b>")];

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ª–æ–≥–∏–Ω–∞
            if (mb_strlen($textMess) > 15) return [$this->createTelegramMessage("–õ–æ–≥—ñ–Ω –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ <u>15</u> <b>—Å–∏–º–≤–æ–ª—ñ–≤</b>")];

            $user = $userModel->findUserByLogin($textMess);

            if ($user == null) return [$this->createTelegramMessage("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å <b>–ª–æ–≥—ñ–Ω–∞</b>")];

            $userModel->insertTelegramDataByLogin($user->login, $chatId, 'pass');
            return [$this->createTelegramMessage(
                "–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –ª–æ–≥—ñ–Ω–∞ <b>" . $textMess . "</b>",
                $this->buttonBuilder([["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥", "backLogin"]])
            )];
        }

        $tgUserState = $tgUser->telegramState;
        if ($tgUserState == "pass") {
            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—è
            if (mb_strlen($textMess) > 20) return [$this->createTelegramMessage(
                "–ü–∞—Ä–æ–ª—å –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ <u>20</u> <b>—Å–∏–º–≤–æ–ª—ñ–≤</b>",
                $this->buttonBuilder([["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥", "backLogin"]])
            )];

            if ($textMess == $tgUser->pass) {
                $userRights = $tgUser->rights;
                if ($userRights == 3) return $this->menuMess(
                    $chatId,
                    "<b>" . $tgUser->name . " –≤–∏ —É—Å–ø—ñ—à–Ω–æ —É–≤—ñ—à–ª–∏</b>\n<i>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞</i>"
                );
                elseif ($userRights == 1 || $userRights == 2 || $userRights == 5) {
                    $userModel->insertTelegramDataByChatId($chatId, "adminMenu");
                    return $this->menuAdminMess();
                } else return [$this->createTelegramMessage(
                    "<b>–£–≤–∞–≥–∞!!!</b> <i>–¶–µ–π —Å–µ—Ä–≤—ñ—Å –ª–∏—à–µ –¥–ª—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤</i>",
                    $this->buttonBuilder([["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥", "backLogin"]])
                )];
            }
            return [$this->createTelegramMessage(
                "<b>–£–≤–∞–≥–∞!!!</b> <i>–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å</i>",
                $this->buttonBuilder([["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥", "backLogin"]])
            )];
        } elseif ($tgUserState == "addPokaz" && $tgUser->rights == 3) {

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–æ–≥–æ –ø–æ–∫–∞–∑–Ω–Ω–∏–∫–∞ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
            if (str_contains($textMess, ' ') || !is_numeric($textMess) || mb_strlen($textMess) > 9) {
                return [$this->createTelegramMessage(
                    "<b>–ë—É–ª–∏ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏</b>\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∫–∞–∑–∞–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑",
                    $this->buttonBuilder([["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é", "backMenu"]])
                )];
            }
            $last = $userModel->getCounterDate();
            $metadata = json_decode($search->getMetadataByChatId($chatId)->telegramMetadata);
            $metaCounterPK = $metadata->counterPK;

            if ($search->checkPokaz($metaCounterPK, $last['year'] . "-" . $last['month'] . "-01", $textMess)) {
                $userModel->insertTelegramDataByChatId(
                    $chatId,
                    "confirm",
                    [
                        "typeCounter" => $metadata->typeCounter, "counterPK" => $metaCounterPK,
                        "pokaz" => $textMess
                    ]
                );
                return [$this->createTelegramMessage(
                    "<b>–î–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</b>\n–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —á–∏ –≤–∫–∞–∑–∞–Ω–Ω—ñ –ø—Ä–∏–≤–∏–ª—å–Ω–æ –¥–∞–Ω–Ω—ñ",
                    $this->buttonBuilder([
                        ["–ü—ñ–¥—Ç–≤–µ—Ä–∂—É—é", "confirm"],
                        ["–î–æ–ø—É—â–µ–Ω–Ω–∞ –ø–æ–º–∏–ª–∫–∞", "denied"]
                    ])
                )];
            }
            return [$this->createTelegramMessage(
                "<b>–£–ø—Å... –ü–æ–∫–∞–∑–Ω–∏–∫ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –Ω–µ –¥–æ–¥–∞–Ω–æ</b>\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∫–∞–∑–∞–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑",
                $this->buttonBuilder([["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é", "backMenu"]])
            )];
        }


        // –ü–æ–º–∏–ª–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ–π —Ä–æ–ª—ñ
        $replyMarkup = ($tgUser->rights == 3) ? $this->buttonBuilder([[
            "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é",
            "backMenu"
        ]]) : $this->buttonBuilder([[
            "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫–∞",
            "adminMenu"
        ]]);
        return [$this->createTelegramMessage(
            "<b>–£–ø—Å... –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∞–Ω—É –¥—ñ—é ü§î</b>",
            $replyMarkup
        )];
    }

    private function callback($json, $chatId)
    {
        $userModel = new User();
        $search = new Search();
        $tgUser = $userModel->findUserByChatId($chatId);
        $callbackData = $json->callback_query->data;

        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Å–∏—Å—Ç–µ–º—ñ
        if ($tgUser == null) return [$this->createTelegramMessage("<b>–£–ø—Å... –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∞–Ω—É –¥—ñ—é ü§î</b>\n–°–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è")];


        $userTgState = $tgUser->telegramState;

        // –ö–∞—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ –µ—Ç–∞–ø—ñ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
        if ($userTgState == 'pass') {
            // –ù–∞ –µ—Ç–∞–ø—ñ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
            if ($callbackData == "backLogin") {
                $userModel->removeTelegramDataByChatId($chatId, "");
                return [$this->createTelegramMessage("–í–≤–µ–¥—ñ—Ç—å –≤–ª–∞—Å–Ω–∏–π <b>–ª–æ–≥—ñ–Ω</b>")];
            }
            return [$this->createTelegramMessage(
                "<b>–£–ø—Å... –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∞–Ω—É –¥—ñ—é ü§î</b>\n–í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–≤–µ—Å—Ç–∏ —Å–≤—ñ–π –ø–∞—Ä–æ–ª—å –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <b>" . $tgUser->login . "</b>",
                $this->buttonBuilder([["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥ –Ω–∞ —Å—Ç–∞–¥—ñ—é –≤–≤–µ–¥–µ–Ω—è –ª–æ–≥—ñ–Ω–∞", "backLogin"]])
            )];
        }

        // –î—ñ—ó –∞–¥–º—ñ–Ω–∞
        if ($tgUser->rights == 1 || $tgUser->rights == 2 || $tgUser->rights == 5) {
            if ($userTgState == 'adminMenu' && $callbackData == 'adminMenu') return $this->menuAdminMess();
            else return [$this->createTelegramMessage(
                "<b>–£–ø—Å... –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∞–Ω—É –¥—ñ—é ü§î</b>",
                $this->buttonBuilder([[
                    "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫–∞",
                    "adminMenu"
                ]])
            )];
        }

        // –î—ñ—ó –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if ($tgUser->rights == 3) {
            if ($callbackData == 'backMenu') return $this->menuMess($chatId, "<b>" . $tgUser->name . "</b> –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞");
            elseif ($userTgState == 'menu' && is_numeric($callbackData)) {
                $counters = $search->findCountersNotFilled($tgUser->area, $callbackData, null);

                if (empty($counters)) return [$this->createTelegramMessage("–ü–æ–∫–∞–∑–Ω–∏–∫–∏ —É—Å—ñ–º –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞–º –±—É–ª–∏ –≤–∫–∞–∑–∞–Ω—ñ\n<b>–í–∏ –º–æ–ª–æ–¥—Ü—ñüòé</b>")];

                $respMessage = [];
                $userModel->insertTelegramDataByChatId(
                    $chatId,
                    'chooseCounter',
                    ["typeCounter" => $callbackData]
                );
                array_push(
                    $respMessage,
                    $this->createTelegramMessage("<b>–°–ø–∏—Å–æ–∫ –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤</b>")
                );
                foreach ($counters as $counter) {
                    array_push(
                        $respMessage,
                        $this->createTelegramMessage(
                            "<b>–©–æ–± –≤–∏–±—Ä–∞—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∏–∫ ‚Ññ</b> <u>" . $counter['counterId'] . "</u>\n–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É\n<b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b> <i>" . $counter['counterName'] . "</i>",
                            $this->buttonBuilder([["‚Ññ " . $counter['counterId'], $counter['id']]])
                        )
                    );
                }
                return $respMessage;
            } elseif ($userTgState == 'chooseCounter' && is_numeric($callbackData)) return $this->chooseCounter($tgUser, $chatId, $callbackData);
            elseif ($userTgState == 'confirm') {
                $last = $userModel->getCounterDate();
                $metadata = json_decode($search->getMetadataByChatId($chatId)->telegramMetadata);

                if ($callbackData == 'denied')
                    return $this->chooseCounter($tgUser, $chatId, null);
                elseif ($callbackData == 'confirm') {
                    $metaCounterPK = $metadata->counterPK;

                    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –¥–∞–Ω–∏—Ö
                    if (!$search->checkPokaz($metaCounterPK, $last['year'] . "-" . $last['month'] . "-01", $metadata->pokaz)) {
                        return [$this->createTelegramMessage("<b>–£–ø—Å... –ü–æ–∫–∞–∑–Ω–∏–∫ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –Ω–µ –¥–æ–¥–∞–Ω–æ</b>\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∫–∞–∑–∞–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")];
                    }

                    $savePokaz = $search->addPokazC($metaCounterPK, $metadata->pokaz, $last['year'], $last['month'], true);

                    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
                    if (!$savePokaz) {
                        return $this->menuMess($chatId, "–ü–æ–∫–∞–∑–Ω–∏–∫ –ª—ñ—á–∏–ª—å–Ω–∏–∫a –∑–∞ <b>" . $last['year'] . "-" . $last['month'] . "-01</b> –±—É–≤ <b>–¥–æ–¥–∞–Ω–∏–π —Ä–∞–Ω—ñ—à–µ</b>\n<b>" . $tgUser->name . "</b> –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞");
                    }

                    $search->recalculation($metaCounterPK);
                    $userModel->addUserLog($tgUser->login,
                        ['login' => $tgUser->login, 'message' => "–î–æ–¥–∞–≤ –ø–æ–∫–∞–∑–Ω–∏–∫ = " . $metadata->pokaz . " –ª—ñ—á–∏–ª—å–Ω–∏–∫—É = " . $search->getCounterByCounterPK($metaCounterPK)->counterId . " (telegram)"]
                    );
                    return $this->menuMess(
                        $chatId,
                        "–ü–æ–∫–∞–∑–Ω–∏–∫ –ª—ñ—á–∏–ª—å–Ω–∏–∫a " . $metadata->pokaz . " –∑–∞ " . $last['month'] . "." . $last['year'] . " –±—É–≤ <b>—É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω—ñ üëç </b>\n<i>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞</i>"
                    );
                }
            } else return [$this->createTelegramMessage(
                "<b>–£–ø—Å... –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∞–Ω—É –¥—ñ—é ü§î</b>",
                $this->buttonBuilder([[
                    "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é",
                    "backMenu"
                ]])
            )];
        }
    }

    private function buttonBuilder($buttons = [], $layout = [], $modeCompose = false, $type = "inline_keyboard")
    {
        $currBnt = array();
        foreach ($buttons as $button) {
            array_push($currBnt, array(
                "text" => $button[0],
                "callback_data" => $button[1]
            ));
        }
        array_push($layout, $currBnt);
        if (!$modeCompose) return array("reply_markup" => array($type => array_reverse($layout)));
        else return $layout;
    }

    private function createTelegramMessage($title, $replyMarkup = null)
    {
        $tgMess = ["text" => $title, "parse_mode" => "HTML"];
        if ($replyMarkup) $tgMess = array_merge($tgMess, $replyMarkup);
        return $tgMess;
    }

    private function chooseCounter($tgUser, $chatId, $counterPK = null)
    {
        $search = new Search();
        $metadata = json_decode($tgUser->telegramMetadata);
        if ($counterPK != null) {
            if (!$search->findCountersNotFilled($tgUser->area, $metadata->typeCounter, $counterPK)) {
                return $this->menuMess(
                    $chatId,
                    "<b>–£–ø—Å... –í–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ ü§î</b>\n<i>" . $tgUser->name . "</i> –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞"
                );
            }
            return $this->addPokazMess($chatId, $metadata, $counterPK);
        }
        return $this->addPokazMess($chatId, $metadata, $metadata->counterPK);
    }

    private function addPokazMess($chatId, $metadata, $counterPK)
    {
        $userModel = new User();
        $search = new Search();
        $userModel->insertTelegramDataByChatId(
            $chatId,
            'addPokaz',
            ["typeCounter" => $metadata->typeCounter, "counterPK" => $counterPK]
        );
        $pokaz = $search->getLastPokazByCounter($counterPK);
        $counter = $search->getCounterByCounterPK($counterPK);
        $lastPokaz = ($pokaz) ? $pokaz->index : $counter->spokaz;
        return [$this->createTelegramMessage(
            "<b>–í–≤–µ–¥—ñ—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫—É ‚Ññ</b> <u>" . $counter->counterId . "</u>\n<b>–ö—Ä–∞–π–Ω—ñ–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å</b> <code>" . $lastPokaz . "</code>",
            $this->buttonBuilder([["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é", "backMenu"]])
        )];
    }

    private function menuMess($chatId, $title)
    {
        $userModel = new User();
        $userModel->insertTelegramDataByChatId($chatId, "menu");
        return [$this->createTelegramMessage(
            $title,
            $this->buttonBuilder([["–ï–ª–µ–∫—Ç—Ä–∏–∫–∞", "8"], ["–ì–∞–∑", "7"], ["–ì–∞—Ä—è—á–∞ –≤–æ–¥–∞", "6"], ["–•–æ–ª–æ–¥–Ω–∞ –≤–æ–¥–∞", "5"]])
        )];
    }

    private function menuAdminMess()
    {
        $search = new Search();
        $counters = $search->findCountersNotFilled();

        if (empty($counters)) {
            return [$this->createTelegramMessage(
                "–ü–æ–∫–∞–∑–Ω–∏–∫–∏ —É—Å—ñ–º –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞–º –±—É–ª–∏ –≤–∫–∞–∑–∞–Ω—ñ\n<b>–ß—É–¥–æ–≤–æüòé</b>",
                $this->buttonBuilder([["–û–Ω–æ–≤–∏—Ç–∏", "adminMenu"]])
            )];
        }

        $respMessage = [];
        array_push(
            $respMessage,
            $this->createTelegramMessage("<b>–°–ø–∏—Å–æ–∫ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤</b>")
        );

        // array_push(
        //     $respMessage,
        //     $this->createTelegramMessage("–õ—ñ—á–∏–ª—å–Ω–∏–∫ ‚Ññ <u>" . $counters[0]['counterId'] . "</u>\n–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è: <b>" . $counters[0]['unit'] . "</b>\n–ê–¥—Ä–µ—Å–∞: <b>" . $counters[0]['addr'] . "</b>")
        // );
        foreach ($counters as $counter) {
            array_push(
                $respMessage,
                $this->createTelegramMessage("–õ—ñ—á–∏–ª—å–Ω–∏–∫ ‚Ññ <u>" . $counter['counterId'] . "</u>\n–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è: <b>" . $counter['unit'] . "</b>\n–ê–¥—Ä–µ—Å–∞: <b>" . $counter['addr'] . "</b>")
            );
        }
        array_push(
            $respMessage,
            $this->createTelegramMessage(
                "<b>–û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –≤–∫–∞–∑–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤</b>\n<b>–í—Å—å–æ–≥–æ –Ω–∞–ª—ñ—á—É—î—Ç—å—Å—è</b> <code>" . count($counters) . "</code> <b>–ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤</b>",
                $this->buttonBuilder([["–û–Ω–æ–≤–∏—Ç–∏", "adminMenu"]])
            )
        );

        return $respMessage;
    }
}
